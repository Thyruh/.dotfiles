;;; ~/.emacs --- Clean, opinionated Emacs config (with Evil leader & Harpoon slots)
;;; Author: Thyruh

;;; ------------------------------
;;; Bootstrap packages
;;; ------------------------------
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/"))
      package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;;; ------------------------------
;;; Minibuffer completion (horizontal icomplete/fido) + Marginalia
;;; ------------------------------
(icomplete-mode 1)
(fido-mode 1)
(fido-vertical-mode -1) ;; horizontal UI

(setq icomplete-compute-delay 0
      icomplete-hide-common-prefix nil
      icomplete-show-matches-on-no-input t
      icomplete-separator " | ")

(with-eval-after-load 'icomplete
  (define-key icomplete-minibuffer-map (kbd "C-n") #'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "C-p") #'icomplete-backward-completions))

(use-package marginalia :init (marginalia-mode 1))

;; Explicitly disable Ivy/Counsel (avoid conflicts)
(when (fboundp 'ivy-mode)     (ivy-mode -1))
(when (fboundp 'counsel-mode) (counsel-mode -1))

;;; ------------------------------
;;; Consult (Telescope-like pickers)
;;; ------------------------------
(use-package consult
  :bind (("C-,"   . consult-buffer)
         ("C-/"   . consult-line)
         ("M-y"   . consult-yank-pop)
         ("C-x r b" . consult-bookmark)
         ("C-x C-r" . consult-recent-file))
  :config
  (setq consult-project-function
        (lambda (_prompt) (when (fboundp 'vc-root-dir) (vc-root-dir))))
  (setq consult-project-root-function
        (lambda () (when (fboundp 'vc-root-dir) (vc-root-dir))))
  (defun thy/consult-ripgrep-project ()
    "Run consult-ripgrep from project root if available."
    (interactive)
    (let ((default-directory (or (funcall consult-project-root-function)
                                 default-directory)))
      (consult-ripgrep default-directory))))

;; Free C-. from Evil’s defaults and map to ripgrep project
(with-eval-after-load 'evil
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (define-key evil-motion-state-map (kbd "C-.") nil))
(global-set-key (kbd "C-.") #'thy/consult-ripgrep-project)

;;; ------------------------------
;;; UI / UX (unchanged appearance)
;;; ------------------------------
(set-face-attribute 'default nil :font "JetBrains Mono ExtraBold-18")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/gruber-darker")
(load-theme 'gruber-darker t)

;; Transparency (keep your comment’s intent: 90% opaque overall)
(add-to-list 'default-frame-alist '(alpha-background . 30))
(set-frame-parameter nil 'alpha-background 70)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(setq-default cursor-type 'box
              cursor-in-non-selected-windows 'box)
(blink-cursor-mode 1)
(setq blink-cursor-interval 0.5)

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)
(show-paren-mode 1)
(setq show-paren-delay 0)
(global-hl-line-mode 1)

(setq-default tab-width 4
              indent-tabs-mode nil)

(setq inhibit-startup-screen t
      initial-scratch-message nil
      initial-buffer-choice t
      use-dialog-box nil)

;;; ------------------------------
;;; Whitespace handling
;;; ------------------------------
(require 'whitespace)
(setq whitespace-style '(face tabs spaces trailing))
(global-whitespace-mode 1)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(defun rc/set-up-whitespace-handling ()
  "Enable basic whitespace handling without trailing $ markers."
  (whitespace-mode 1)
  (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))
(add-hook 'prog-mode-hook #'rc/set-up-whitespace-handling)
(add-hook 'text-mode-hook #'rc/set-up-whitespace-handling)

;;; ------------------------------
;;; Core editing helpers
;;; ------------------------------
(setq-default scroll-margin 5
              scroll-conservatively 9999
              scroll-step 1)

(use-package smartparens
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1))

(global-visual-line-mode 1)

;;; ------------------------------
;;; COMPLETION / LSP / DIAGNOSTICS
;;; ------------------------------
(use-package corfu
  :config
  (global-corfu-mode)
  (setq corfu-auto t
        corfu-preselect 'first
        corfu-count 8))

(use-package flycheck :init (global-flycheck-mode 1))

(use-package lsp-mode
  :init
  (setq lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil)
  :hook ((go-mode c-mode c++-mode python-mode rust-mode haskell-mode) . lsp-deferred)
  :commands (lsp lsp-deferred))
(use-package lsp-ui :after lsp-mode :commands lsp-ui-mode)

;;; ------------------------------
;;; Tree-sitter
;;; ------------------------------
(use-package tree-sitter :defer t)
(use-package tree-sitter-langs :after tree-sitter :defer t)
(when (require 'tree-sitter nil 'noerror)
  (global-tree-sitter-mode 1)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

;;; ------------------------------
;;; Dired
;;; ------------------------------
(require 'dired-x)
(setq dired-listing-switches "-alFhG --group-directories-first"
      dired-dwim-target t
      dired-mouse-drag-files t)
(add-hook 'dired-mode-hook #'dired-omit-mode)
(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))

;;; ------------------------------
;;; Compilation workflow
;;; ------------------------------
(setq display-buffer-alist
      '(("\\*compilation\\*"
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-height . 15))))

(global-set-key (kbd "C-c C-c") 'compile)
(setq compile-command ""
      compilation-read-command t)

(require 'ansi-color)
(defun rc/colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region compilation-filter-start (point))))
(add-hook 'compilation-filter-hook #'rc/colorize-compilation-buffer)

(defun rc/compile-file-to-bin ()
  "Automatically compiles .cpp/.go/.hs files to 'bin/' directory."
  (interactive)
  (unless buffer-file-name (user-error "Buffer not visiting a file"))
  (let* ((file buffer-file-name)
         (dir  (file-name-directory file))
         (bin  (expand-file-name "bin" dir))
         (out  (expand-file-name (file-name-sans-extension (file-name-nondirectory file)) bin)))
    (unless (file-directory-p bin)
      (make-directory bin))
    (cond
     ((string-match-p "\\.cpp$" file)
      (compile (format "g++ -O2 -std=c++23 -o %s %s"
                       (shell-quote-argument out)
                       (shell-quote-argument file))))
     ((string-match-p "\\.go$" file)
      (compile (format "go build -o %s %s"
                       (shell-quote-argument out)
                       (shell-quote-argument file))))
     ((string-match-p "\\.hs$" file)
      (compile (format "ghc --make %s -o %s"
                       (shell-quote-argument file)
                       (shell-quote-argument out))))
     (t (user-error "Unsupported file type: %s" file)))))

(global-set-key (kbd "C-c c") #'rc/compile-file-to-bin)

;;; ------------------------------
;;; Magit (+ Forge) and Git fringe
;;; ------------------------------
(use-package magit
  :commands (magit-status magit-log-all)
  :config
  (when (fboundp 'magit-auto-revert-mode)
    (magit-auto-revert-mode -1)))

(use-package forge :after magit)
(use-package diff-hl
  :hook ((prog-mode . diff-hl-mode)
         (text-mode . diff-hl-mode))
  :config
  (diff-hl-flydiff-mode 1))

;;; ------------------------------
;;; Quality-of-life keys
;;; ------------------------------
(global-set-key (kbd "M-d") 'backward-delete-char)
(global-set-key (kbd "C-x C-r") 'consult-recent-file) ;; keep consult here
(global-set-key (kbd "C-x C-w") 'other-window)
(global-set-key (kbd "<escape>") #'keyboard-escape-quit)
(global-set-key (kbd "C-q") 'back-to-indentation)
(global-set-key (kbd "C-,") #'consult-buffer)
(global-set-key (kbd "C-c g d") #'lsp-find-definition)
(global-set-key (kbd "C-h l") #'shell)
(global-set-key (kbd "M-w") #'copy-region-as-kill)
(setq confirm-kill-emacs #'yes-or-no-p)

;;; ------------------------------
;;; Evil (modal editing) + ecosystem
;;; ------------------------------
(setq evil-want-C-u-scroll t
      evil-want-keybinding nil   ;; prepare for evil-collection if added later
      evil-want-C-i-jump t)

(use-package evil :config (evil-mode 1))

;; Surround & commentary
(use-package evil-surround :config (global-evil-surround-mode 1))
(use-package evil-commentary :config (evil-commentary-mode 1))

;; Multicursors: switch to evil-mc (remove multiple-cursors)
(use-package evil-mc :config (global-evil-mc-mode 1))

;; Quick motion (like easymotion)
(use-package avy
  :bind (("M-s" . avy-goto-char-timer)))

(with-eval-after-load 'evil
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-file)))

;;; ------------------------------
;;; Move lines up/down (visual J/K) + your move-text keys
;;; ------------------------------
(use-package move-text
  :config
  (move-text-default-bindings)
  (global-set-key (kbd "M-p") #'move-text-up)
  (global-set-key (kbd "M-n") #'move-text-down))

(defun my/visual-move-down (beg end)
  "Move selected lines down (Visual mode J)."
  (interactive "r")
  (let ((text (delete-and-extract-region beg end)))
    (goto-char beg)
    (forward-line 1)
    (insert text)
    (exchange-point-and-mark)
    (setq deactivate-mark nil)))

(defun my/visual-move-up (beg end)
  "Move selected lines up (Visual mode K)."
  (interactive "r")
  (let ((text (delete-and-extract-region beg end)))
    (goto-char beg)
    (forward-line -1)
    (insert text)
    (exchange-point-and-mark)
    (setq deactivate-mark nil)))

(with-eval-after-load 'evil
  (define-key evil-visual-state-map (kbd "J") #'my/visual-move-down)
  (define-key evil-visual-state-map (kbd "K") #'my/visual-move-up))

;;; ------------------------------
;;; Harpoon-like automatic slots (1–4) + quick menu
;;; ------------------------------
(defvar my/harpoon-slots (make-vector 4 nil)
  "Vector of 4 Harpoon slots storing file paths.")
(defvar my/harpoon-index 0
  "Next slot index for harpoon add (0..3).")

(defun my/harpoon-add-file ()
  "Add current file to harpoon slots (cycles 1–4)."
  (interactive)
  (if buffer-file-name
      (progn
        (aset my/harpoon-slots my/harpoon-index buffer-file-name)
        (message "Harpoon: %s → slot %d"
                 (file-name-nondirectory buffer-file-name)
                 (+ 1 my/harpoon-index))
        (setq my/harpoon-index (mod (1+ my/harpoon-index) 4)))
    (message "Harpoon: buffer has no file")))

(defun my/harpoon-nav (n)
  "Jump to harpoon slot N (1..4)."
  (interactive "nSlot: ")
  (let ((file (aref my/harpoon-slots (1- n))))
    (if (and file (file-exists-p file))
        (find-file file)
      (message "Harpoon: slot %d is empty" n))))

(defun my/harpoon-clear-slot (n)
  "Clear harpoon slot N."
  (interactive "nClear slot: ")
  (aset my/harpoon-slots (1- n) nil)
  (message "Harpoon: cleared slot %d" n))

(defun my/harpoon-menu ()
  "Show Harpoon slots in a temporary buffer."
  (interactive)
  (with-output-to-temp-buffer "*Harpoon*"
    (dotimes (i 4)
      (princ (format "Slot %d: %s\n"
                     (1+ i)
                     (or (aref my/harpoon-slots i) "empty"))))))

;;; ------------------------------
;;; General.el (leader) + Which-key
;;; ------------------------------
(use-package general)

(use-package which-key
  :init (which-key-mode 1)
  :config
  (setq which-key-idle-delay 0.3))

;; Define Space as leader
(general-create-definer thy/leader
  :states '(normal visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")

;;; ------------------------------
;;; Leader mappings (Neovim parity)
;;; ------------------------------
;; Harpoon
(thy/leader
  "a" '(my/harpoon-add-file :which-key "harpoon add"))

;; Telescope equivalents via consult
(thy/leader
  "p" '(:ignore t :which-key "project")
  "pf" '(consult-find :which-key "find files")
  "ps" '(consult-ripgrep :which-key "grep project")
  "hf" '(execute-extended-command :which-key "M-x")
  "f"  '(consult-flycheck :which-key "diagnostics"))

;; Ex (file explorer) → Dired
(thy/leader
  "pv" '(dired :which-key "file explorer"))

;; Git files on C-p (approximate): use consult-ripgrep from project root
(global-set-key (kbd "C-p") #'thy/consult-ripgrep-project)

;; Harpoon quick menu + jumps (match your <C-e> and <C-h/j/k/l>)
(with-eval-after-load 'evil
  (define-key evil-normal-state-map (kbd "C-e") #'my/harpoon-menu)
  (define-key evil-normal-state-map (kbd "C-h") (lambda () (interactive) (my/harpoon-nav 1)))
  (define-key evil-normal-state-map (kbd "C-j") (lambda () (interactive) (my/harpoon-nav 2)))
  (define-key evil-normal-state-map (kbd "C-k") (lambda () (interactive) (my/harpoon-nav 3)))
  (define-key evil-normal-state-map (kbd "C-l") (lambda () (interactive) (my/harpoon-nav 4))))

;;; ------------------------------
;;; Per-file quick jumps (keep your old harpoon binds too if you want)
;;; ------------------------------
;; Keeping your original C-c h … bindings intact (they can coexist)
(global-set-key (kbd "C-c a") #'my/harpoon-add-file)
(global-set-key (kbd "C-c h 1") (lambda () (interactive) (my/harpoon-nav 1)))
(global-set-key (kbd "C-c h 2") (lambda () (interactive) (my/harpoon-nav 2)))
(global-set-key (kbd "C-c h 3") (lambda () (interactive) (my/harpoon-nav 3)))
(global-set-key (kbd "C-c h 4") (lambda () (interactive) (my/harpoon-nav 4)))
(global-set-key (kbd "C-c h h") #'my/harpoon-menu)

;;; ------------------------------
;;; Scratch: C++ compile & run in *scratch*
;;; ------------------------------
(defun scratch-compile ()
  "Compile and run the *scratch* buffer as C++ without leaving files."
  (interactive)
  (if (not (eq (current-buffer) (get-buffer "*scratch*")))
      (message "scratch-compile only works in *scratch* buffer")
    (let* ((tmp (make-temp-file "emacs-cpp-" nil ".cpp"))
           (bin (concat tmp ".out")))
      (write-region (point-min) (point-max) tmp nil 'silent)
      (compile
       (format "g++ -std=c++23 -O2 -Wall %s -o %s && %s && rm -f %s %s"
               tmp bin bin bin tmp)))))

(with-current-buffer "*scratch*"
  (local-set-key (kbd "C-c C-c") #'scratch-compile))

;;; ------------------------------
;;; Eval control
;;; ------------------------------
(defun rc/eval-buffer ()
  "Evaluate current Emacs Lisp buffer safely."
  (interactive)
  (if (eq major-mode 'emacs-lisp-mode)
      (progn
        (funcall (symbol-function 'eval-buffer))
        (message "Buffer evaluated!"))
    (message "Not an Emacs Lisp buffer.")))
(global-set-key (kbd "C-j") #'rc/eval-buffer)

;;; ------------------------------
;;; Saves, locks, backups
;;; ------------------------------
(setq auto-save-default nil
      make-backup-files nil
      create-lockfiles nil)

;;; ------------------------------
;;; Final touches / custom vars file
;;; ------------------------------
(setq custom-file (expand-file-name "~/.emacs-custom-vars.el"))
(load custom-file 'noerror 'nomessage)

;; Ensure C++ mode doesn’t shadow compile
(with-eval-after-load 'cc-mode
  (define-key c++-mode-map (kbd "C-c C-c") #'compile))

(defun rc/maybe-backup-emacs ()
  "If current buffer is ~/.emacs, save a timestamped copy in ~/.dotfiles/."
  (when (and buffer-file-name
             (string= (file-truename buffer-file-name)
                      (file-truename "~/.emacs")))
    (let ((dst (expand-file-name
                (format ".emacs-backup-%s"
                        (format-time-string "%Y-%m-%d.%H:%M:%S"))
                "~/.dotfiles/")))
      (copy-file buffer-file-name dst t)
      (message "Backed up .emacs → %s" dst))))
(add-hook 'after-save-hook #'rc/maybe-backup-emacs)

;;; .emacs ends here
